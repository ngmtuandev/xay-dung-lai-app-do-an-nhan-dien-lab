import React, { useState, useEffect, useRef } from "react";
import { View, Text, StyleSheet, Button, Platform } from "react-native";
import { Camera, CameraView } from "expo-camera";
import axios from "axios";
import { showMessage } from "react-native-flash-message";
import { routers } from "../navigate/routers"; // Gi·∫£ s·ª≠ c√≥ m·ªôt router navigation nh∆∞ trong logic c≈©
import { useSelector } from "react-redux";

export default function FaceRecognitionScreen({ navigation }) {
  const [hasPermission, setHasPermission] = useState(null);
  const [capturedImages, setCapturedImages] = useState([]);
  const cameraRef = useRef(null);

  useEffect(() => {
    // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera tr√™n thi·∫øt b·ªã di ƒë·ªông
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  // H√†m ch·ª•p ·∫£nh v√† upload ·∫£nh
  const takePictureAndUpload = async () => {
    if (capturedImages.length >= 12) {
      console.log("ƒê√£ ch·ª•p ƒë·ªß ·∫£nh.", capturedImages);
      return;
    }

    try {
      // Ch·ª•p ·∫£nh t·ª´ camera
      const photo = await cameraRef.current?.takePictureAsync({ quality: 1 });

      // G·ª≠i ·∫£nh l√™n API
      await uploadImage(photo.uri);
    } catch (error) {
      // console.error("L·ªói khi ch·ª•p ho·∫∑c upload ·∫£nh:", error);
    }
  };

  const { user } = useSelector((state: any) => state.auth);

  // H√†m upload ·∫£nh l√™n API
  const uploadImage = async (imageUri) => {
    try {
      const formData = new FormData();

      // Tr√™n di ƒë·ªông, s·ª≠ d·ª•ng URI
      formData.append("file", {
        uri: imageUri,
        name: "image.jpg",
        type: "image/jpeg",
      });

      // G·ª≠i ·∫£nh l√™n API
      const response = await axios.post(
        "https://lab-manager-backend-production.up.railway.app/auth/upload",
        formData,
        {
          headers: { "Content-Type": "multipart/form-data" },
        }
      );

      if (response?.data?.isSuccess) {
        showMessage({
          message: "L·∫•y h√¨nh ·∫£nh th√†nh c√¥ng, vui l√≤ng ƒë·ª£i!",
          type: "success",
        });
        setCapturedImages((previous) => [...previous, response?.data?.data]);
      } else {
        showMessage({
          message: "T·∫£i h√¨nh ·∫£nh th·∫•t b·∫°i!",
          type: "warning",
        });
      }
    } catch (error) {
      console.error("L·ªói khi upload ·∫£nh:", error);
    }
  };

  useEffect(() => {
    console.log("capture ================== ", capturedImages);
    // Theo d√µi danh s√°ch ·∫£nh c·∫≠p nh·∫≠t
    if (capturedImages.length >= 12) {
      showMessage({
        message: "Ch·ª•p ƒë·ªß ·∫£nh, chu·∫©n b·ªã g·ª≠i!",
        type: "success",
      });
      (async () => {
        const response = await axios.post(
          "https://lab-manager-backend-production.up.railway.app/user/update-image",
          {
            images: capturedImages,
            id: user?.id,
          }
        );
        console.log("üöÄ ~ response:", response?.data);
        if (response?.data?.isSuccess) {
          setTimeout(() => {
            navigation.navigate(routers.HOME);
            showMessage({
              message: "C·∫¨P NH·∫¨P KHU√îN M·∫∂T TH√ÄNH C√îNG!",
              type: "success",
            });
          }, 8000); // ƒêi·ªÅu h∆∞·ªõng sau khi upload ƒë·ªß ·∫£nh
        }
      })();
    }
  }, [capturedImages]);

  // H√†m b·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ª•p ·∫£nh li√™n t·ª•c
  const startCaptureProcess = () => {
    let captureCount = 0; // ƒê·∫øm s·ªë l∆∞·ª£ng ·∫£nh ƒë√£ ch·ª•p
    const interval = setInterval(async () => {
      if (captureCount >= 12) {
        clearInterval(interval); // D·ª´ng qu√° tr√¨nh ch·ª•p
      } else {
        await takePictureAndUpload();
        captureCount++; // TƒÉng s·ªë l∆∞·ª£ng ·∫£nh ƒë√£ ch·ª•p
      }
    }, 3000); // Ch·ª•p ·∫£nh m·ªói 3 gi√¢y
  };

  if (hasPermission === null) {
    return (
      <View style={styles.container}>
        <Text>ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p camera...</Text>
      </View>
    );
  }

  if (hasPermission === false) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>
          B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p camera ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.
        </Text>
        <Button
          onPress={async () => {
            const { status } = await Camera.requestCameraPermissionsAsync();
            setHasPermission(status === "granted");
          }}
          title="Cho ph√©p truy c·∫≠p"
        />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <CameraView facing="front" style={styles.camera} ref={cameraRef}>
        <View style={styles.buttonContainer}></View>
      </CameraView>

      <Button
        title="B·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh"
        onPress={startCaptureProcess}
        color="green"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#000",
  },
  message: {
    textAlign: "center",
    color: "#fff",
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
    width: "100%",
  },
  buttonContainer: {
    flex: 0.1,
    backgroundColor: "transparent",
    flexDirection: "row",
    marginBottom: 10,
  },
});
